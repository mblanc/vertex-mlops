# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from typing import Any, Dict

from google.cloud import aiplatform
from kfp.v2 import compiler, dsl

from src.components.bigquery.bq_import import import_csv_to_bigquery


@dsl.pipeline(name="tabular-classification-pipeline")
def pipeline(
    project: str,
    gcs_input_file_uri: str,
    region: str,
    bq_dataset: str,
    bq_location: str,
):
    # Imports data to BigQuery using a custom component.
    _ = import_csv_to_bigquery(project, bq_location, bq_dataset, gcs_input_file_uri)


def compile(package_path: str):
    """Compile the pipeline"""
    compiler.Compiler().compile(
        pipeline_func=pipeline,
        package_path=package_path,
    )


_default_pipeline_params = {}


def run_job(
    template_path: str,
    pipeline_root: str,
    project: str,
    region: str,
    pipeline_params: Dict[str, Any] = _default_pipeline_params,
):
    """Run the pipeline"""
    job = aiplatform.PipelineJob(
        display_name="tabular_classification_pipeline",
        template_path=template_path,
        pipeline_root=pipeline_root,
        parameter_values=pipeline_params,
        project=project,
        location=region,
        enable_caching=False,
    )
    job.run()


def parse_args() -> argparse.Namespace:
    """Parse arguments"""
    parser = argparse.ArgumentParser(
        description="tabular classification pipeline operations."
    )

    commands = parser.add_subparsers(help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file."
    )
    cmd_compile.add_argument(
        "-o",
        "--output",
        default="tabular_classification_pipeline_spec.json",
        help="package file output path.",
    )

    # run command arguments
    cmd_run_job = commands.add_parser("run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument(
        "--template_path", required=True, help="path to compiled pipeline package file."
    )
    cmd_run_job.add_argument(
        "--pipeline_root",
        required=True,
        help="GCS root directory for files generated by pipeline job.",
    )
    # Additional pipeline parameters.
    cmd_run_job.add_argument("--project", required=True, help="project ID.")
    cmd_run_job.add_argument("--region", required=True, help="region.")
    cmd_run_job.add_argument(
        "--gcs_input_file_uri", required=True, help="Training dataset path."
    )
    cmd_run_job.add_argument("--bq_dataset", required=True, help="BQ Dataset.")
    cmd_run_job.add_argument("--bq_location", required=True, help="BQ Location.")

    return parser.parse_args()


def main(args):
    if args.command == "compile":
        compile(args.output)
    elif args.command == "run":
        aiplatform.init()
        # If pipeline parameters are necessary, add them here.
        pipeline_params = {
            "project": args.project,
            "region": args.region,
            "gcs_input_file_uri": args.gcs_input_file_uri,
            "bq_dataset": args.bq_dataset,
            "bq_location": args.bq_location,
        }
        run_job(
            template_path=args.template_path,
            pipeline_root=args.pipeline_root,
            project=args.project,
            region=args.region,
            pipeline_params=pipeline_params,
        )
    else:
        print(f"Command not implemented: {args.command}")


if __name__ == "__main__":
    main(parse_args())
