# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import json
from os import path
from typing import Dict, Any

from google.cloud import aiplatform
from google_cloud_pipeline_components import aiplatform as gcc_aip
from kfp.v2 import compiler, dsl

from src.components.metrics.automl import interpret_automl_regression_metrics


@dsl.pipeline(name="tabular-classification-automl-pipeline")
def pipeline(
        project: str,
        region: str,
        bq_table: str,
        label: str,
        display_name: str,
):
    dataset_create_op = gcc_aip.TabularDatasetCreateOp(
        project=project,
        location=region,
        display_name=display_name,
        bq_source=bq_table
    )

    training_op = gcc_aip.AutoMLTabularTrainingJobRunOp(
        project=project,
        location=region,
        display_name=display_name,
        optimization_prediction_type="regression",
        dataset=dataset_create_op.outputs["dataset"],
        target_column=label,
    )

    model_eval_op = interpret_automl_regression_metrics(
        project,
        region,
        training_op.outputs["model"],
    )


#     endpoint_op = EndpointCreateOp(
#         project=project,
#         location=region,
#         display_name=display_name + '_endpoint',
#     )

#     ModelDeployOp(
#         model=training_op.outputs["model"],
#         endpoint=endpoint_op.outputs["endpoint"],
#         dedicated_resources_machine_type="n1-standard-2",
#         dedicated_resources_min_replica_count=1,
#         dedicated_resources_max_replica_count=1,
#     )


def compile(package_path: str):
    """ Compile the pipeline """
    compiler.Compiler().compile(
        pipeline_func=pipeline, package_path=package_path,
    )


def run_job(
        template_path: str,
        pipeline_root: str,
        project: str,
        region: str,
        pipeline_params: Dict[str, Any] = {},
):
    """ Run the pipeline """
    job = aiplatform.PipelineJob(
        display_name="tabular_regression_automl_pipeline",
        template_path=template_path,
        pipeline_root=pipeline_root,
        parameter_values=pipeline_params,
        project=project,
        location=region,
        enable_caching=False,
    )
    job.run()


def parse_args() -> argparse.Namespace:
    """ Parse arguments """
    parser = argparse.ArgumentParser(description=f"tabular regression automl pipeline operations.")

    commands = parser.add_subparsers(help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file.")
    cmd_compile.add_argument("--template_path", required=True, help="path to compiled pipeline package file.")

    # run command arguments
    cmd_run_job = commands.add_parser("run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument("--project", required=True, help="project ID.")
    cmd_run_job.add_argument("--region", required=True, help="region.")
    cmd_run_job.add_argument("--template_path", required=True, help="path to compiled pipeline package file.")
    cmd_run_job.add_argument("--pipeline_root", required=True,
                             help="GCS root directory for files generated by pipeline job.")

    return parser.parse_args()


def main(args):
    if args.command == "compile":
        compile(args.template_path)
    elif args.command == "run":
        aiplatform.init()

        basepath = path.dirname(__file__)
        filepath = path.abspath(path.join(basepath, "params.json"))
        print(filepath)
        with open(filepath) as json_file:
            pipeline_params = json.load(json_file)

        print(pipeline_params)

        run_job(
            template_path=args.template_path,
            pipeline_root=args.pipeline_root,
            project=args.project,
            region=args.region,
            pipeline_params=pipeline_params,
        )
    else:
        print(f"Command not implemented: {args.command}")


if __name__ == "__main__":
    main(parse_args())
