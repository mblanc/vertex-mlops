import argparse
import json
from os import path
from typing import Any, Dict

from google.cloud import aiplatform

_default_pipeline_params: Dict = {}


def run_job(
    template_path: str,
    pipeline_root: str,
    project: str,
    region: str,
    pipeline_params: Dict[str, Any] = _default_pipeline_params,
):
    """Run the pipeline"""
    job = aiplatform.PipelineJob(
        display_name="tabular_classification_automl_evaluation_pipeline",
        template_path=template_path,
        pipeline_root=pipeline_root,
        parameter_values=pipeline_params,
        project=project,
        location=region,
        enable_caching=False,
    )
    job.run()


def parse_args() -> argparse.Namespace:
    """Parse arguments"""
    parser = argparse.ArgumentParser(
        description="tabular classification evalauation pipeline operations."
    )

    commands = parser.add_subparsers(help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file."
    )
    cmd_compile.add_argument(
        "--template_path", required=True, help="path to compiled pipeline package file."
    )

    # run command arguments
    cmd_run_job = commands.add_parser("run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument("--project", required=True, help="project ID.")
    cmd_run_job.add_argument("--region", required=True, help="region.")
    cmd_run_job.add_argument(
        "--template_path", required=True, help="path to compiled pipeline package file."
    )
    cmd_run_job.add_argument(
        "--pipeline_root",
        required=True,
        help="GCS root directory for files generated by pipeline job.",
    )

    return parser.parse_args()


def main(args):
    if args.command == "compile":
        compile(args.template_path)
    elif args.command == "run":
        aiplatform.init()

        basepath = path.dirname(__file__)
        filepath = path.abspath(path.join(basepath, "params.json"))
        print(filepath)
        with open(filepath) as json_file:
            pipeline_params = json.load(json_file)

        print(pipeline_params)

        run_job(
            template_path=args.template_path,
            pipeline_root=args.pipeline_root,
            project=args.project,
            region=args.region,
            pipeline_params=pipeline_params,
        )
    else:
        print(f"Command not implemented: {args.command}")


if __name__ == "__main__":
    main(parse_args())
