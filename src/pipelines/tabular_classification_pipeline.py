# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from typing import NamedTuple, Dict, Any
import kfp
from kfp.v2 import compiler, dsl
from kfp.v2.dsl import (Artifact, Dataset, Input, Metrics, ClassificationMetrics, Model, Output,
                        OutputPath, component, HTML)
from kfp.v2.google import experimental
from google.cloud import aiplatform
from google_cloud_pipeline_components import aiplatform as gcc_aip

@dsl.pipeline(name="fraud-detection-pipeline")
def pipeline(
    project: str,
    region: str,
    data_path: str,
    model_dir: str,
    lr: float = 0.03,
    baseline_accuracy: float = 0.70,
):  
    
    dataset_op = get_data(
        data_path=data_path
    )
        
    train_op = train_xgb_model(dataset_op.outputs["dataset_train"], model_dir)
    
    eval_op = eval_model(
        test_set=dataset_op.outputs["dataset_test"],
        xgb_model=train_op.outputs["model_artifact"]
    )
    
    test_accuracy_op = test_accuracy(baseline_accuracy,  eval_op.outputs["accuracy"])

    with dsl.Condition(test_accuracy_op.output == "true", name="eval models"):
        model_upload_op = gcc_aip.ModelUploadOp(
            project=project,
            location=region,
            display_name="custom_xgboost_fraud_model_preprod",
            artifact_uri=model_dir,
            serving_container_image_uri="europe-docker.pkg.dev/vertex-ai/prediction/xgboost-cpu.1-4:latest"
        ).set_caching_options(True)


        endpoint_create_op = gcc_aip.EndpointCreateOp(
            project=project,
            location=region,
            display_name="custom_xgboost_fraud_endpoint_preprod",
        )

        gcc_aip.ModelDeployOp(
            endpoint=endpoint_create_op.outputs["endpoint"],
            model=model_upload_op.outputs["model"],
            traffic_split='{"0": 100}',
            deployed_model_display_name="custom_xgboost_fraud_model_preprod",
            dedicated_resources_machine_type="n1-standard-2",
            dedicated_resources_min_replica_count=1,
            dedicated_resources_max_replica_count=1,
            #explanation_metadata={"inputs": {"input": {}},"outputs": {"output": {}}}, 
            #explanation_parameters={"sampled_shapley_attribution": {"path_count": 25}}
        ).set_caching_options(True)

def compile(package_path: str):
    """ Compile the pipeline """
    compiler.Compiler().compile(
        pipeline_func=pipeline, package_path=package_path,
    )
    
def parse_args() -> argparse.Namespace:
    """ Parse arguments """
    parser = argparse.ArgumentParser(description=f"{PIPELINE_NAME} pipeline operations.")
    
    commands = parser.add_subparsers(help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file.")
    cmd_compile.add_argument("-o", "--output", default="fraud_detection_pipeline_spec.json", help="package file output path.")

    # run command arguments
    cmd_run_job = commands.add_parser("run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument("--template_path", required=True, help="path to compiled pipeline package file.")
    cmd_run_job.add_argument("--pipeline_root", required=True, help="GCS root directory for files generated by pipeline job.")
    # Additional pipeline parameters.
    cmd_run_job.add_argument("--project", required=True, help="project ID.")
    cmd_run_job.add_argument("--region", required=True, help="region.")
    cmd_run_job.add_argument("--data_path", required=True, help="Training dataset path.")
    cmd_run_job.add_argument("--model_dir", required=True, help="GCS model directory uri.")

    return parser.parse_args()


def main(args):

    if args.command == "compile":
        compile(args.output)
    elif args.command == "run":
        aiplatform.init()
        # If pipeline parameters are necessary, add them here.
        pipeline_params = {
            "project": args.project,
            "region": args.region,
            "data_path": args.data_path,
            "model_dir": args.model_dir,
        }
        run_job(template_path=args.template_path, 
                pipeline_root=args.pipeline_root,
                project=args.project,
                region=args.region,
                pipeline_params=pipeline_params,
               )
    else:
        print(f"Command not implemented: {args.command}")


if __name__ == "__main__":
    main(parse_args())