# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import json
from os import path
from typing import Any, Dict

from google.cloud import aiplatform
from google_cloud_pipeline_components import aiplatform as gcc_aip
from kfp.v2 import compiler, dsl


@dsl.pipeline(name="forecasting-automl-pipeline")
def pipeline(
    project: str,
    region: str,
    display_name: str,
    bq_table: str,
    label: str,
    time_column: str,
    id_column: str,
    available_at_forecast_columns: list,
    unavailable_at_forecast_columns: list,
    time_series_attribute_columns: list,
    forecast_horizon: int,
    context_window: int,
    data_granularity_unit: str,
    data_granularity_count: int,
    column_specs: dict,
    bigquery_source_input_uri: str,
    bigquery_destination_output_uri: str,
):
    dataset_create_op = gcc_aip.TimeSeriesDatasetCreateOp(
        project=project, location=region, display_name=display_name, bq_source=bq_table
    )

    training_op = gcc_aip.AutoMLForecastingTrainingJobRunOp(
        project=project,
        location=region,
        display_name=display_name,
        dataset=dataset_create_op.outputs["dataset"],
        target_column=label,
        time_column=time_column,
        time_series_identifier_column=id_column,
        available_at_forecast_columns=available_at_forecast_columns,
        unavailable_at_forecast_columns=unavailable_at_forecast_columns,
        time_series_attribute_columns=time_series_attribute_columns,
        forecast_horizon=forecast_horizon,
        context_window=context_window,
        data_granularity_unit=data_granularity_unit,
        data_granularity_count=data_granularity_count,
        column_specs=column_specs,
        export_evaluated_data_items=True,
    )

    batch_predict_op = gcc_aip.ModelBatchPredictOp(
        project=project,
        location=region,
        job_display_name=display_name,
        model=training_op.outputs["model"],
        instances_format="bigquery",
        bigquery_source_input_uri=bigquery_source_input_uri,
        predictions_format="bigquery",
        bigquery_destination_output_uri=bigquery_destination_output_uri,
        generate_explanation=True,
    )


def compile(package_path: str):
    """Compile the pipeline"""
    compiler.Compiler().compile(
        pipeline_func=pipeline,
        package_path=package_path,
    )


def run_job(
    template_path: str,
    pipeline_root: str,
    project: str,
    region: str,
    pipeline_params: Dict[str, Any] = {},
):
    """Run the pipeline"""
    job = aiplatform.PipelineJob(
        display_name="forecasting_automl_pipeline",
        template_path=template_path,
        pipeline_root=pipeline_root,
        parameter_values=pipeline_params,
        project=project,
        location=region,
        enable_caching=False,
    )
    job.run()


def parse_args() -> argparse.Namespace:
    """Parse arguments"""
    parser = argparse.ArgumentParser(
        description=f"forecasting automl pipeline operations."
    )

    commands = parser.add_subparsers(help="commands", dest="command", required=True)

    # compile command arguments
    cmd_compile = commands.add_parser(
        "compile", help="compile pipeline function to a json package file."
    )
    cmd_compile.add_argument(
        "--template_path", required=True, help="path to compiled pipeline package file."
    )

    # run command arguments
    cmd_run_job = commands.add_parser("run", help="run pipeline job on AI platform.")
    cmd_run_job.add_argument("--project", required=True, help="project ID.")
    cmd_run_job.add_argument("--region", required=True, help="region.")
    cmd_run_job.add_argument(
        "--template_path", required=True, help="path to compiled pipeline package file."
    )
    cmd_run_job.add_argument(
        "--pipeline_root",
        required=True,
        help="GCS root directory for files generated by pipeline job.",
    )

    return parser.parse_args()


def main(args):
    if args.command == "compile":
        compile(args.template_path)
    elif args.command == "run":
        aiplatform.init()

        basepath = path.dirname(__file__)
        filepath = path.abspath(path.join(basepath, "params.json"))
        print(filepath)
        with open(filepath) as json_file:
            pipeline_params = json.load(json_file)

        print(pipeline_params)

        run_job(
            template_path=args.template_path,
            pipeline_root=args.pipeline_root,
            project=args.project,
            region=args.region,
            pipeline_params=pipeline_params,
        )
    else:
        print(f"Command not implemented: {args.command}")


if __name__ == "__main__":
    main(parse_args())
