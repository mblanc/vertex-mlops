{
  "pipelineSpec": {
    "components": {
      "comp-interpret-automl-classification-metrics": {
        "executorLabel": "exec-interpret-automl-classification-metrics",
        "inputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "project": {
              "type": "STRING"
            },
            "region": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "classificationMetrics": {
              "artifactType": {
                "schemaTitle": "system.ClassificationMetrics",
                "schemaVersion": "0.0.1"
              }
            },
            "metrics": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-return-unmanaged-model": {
        "executorLabel": "exec-return-unmanaged-model",
        "inputDefinitions": {
          "parameters": {
            "artifact_uri": {
              "type": "STRING"
            },
            "resource_name": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "model": {
              "artifactType": {
                "schemaTitle": "system.Artifact",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-interpret-automl-classification-metrics": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "interpret_automl_classification_metrics"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef interpret_automl_classification_metrics(\n    project: str, region: str, model: Input[Artifact], metrics: Output[Metrics], classificationMetrics: Output[ClassificationMetrics]\n):\n    import json\n    import logging\n\n    from google.cloud import aiplatform as aip\n\n    def get_eval_info(client, model_name):\n        from google.protobuf.json_format import MessageToDict\n\n        response = client.list_model_evaluations(parent=model_name)\n        metrics_list = []\n        for evaluation in response:\n            print(\"model_evaluation\")\n            print(\" name:\", evaluation.name)\n            print(\" metrics_schema_uri:\", evaluation.metrics_schema_uri)\n            metrics = MessageToDict(evaluation._pb.metrics)\n            for metric in metrics.keys():\n                logging.info(\"metric: %s, value: %s\", metric, metrics[metric])\n            metrics_str = json.dumps(metrics)\n            metrics_list.append(metrics)\n\n        return metrics_list\n\n    def log_metrics(metrics_list, classificationMetrics):\n        test_confusion_matrix = metrics_list[0][\"confusionMatrix\"]\n        logging.info(\"rows: %s\", test_confusion_matrix[\"rows\"])\n\n        # log the ROC curve\n        fpr = []\n        tpr = []\n        thresholds = []\n        for item in metrics_list[0][\"confidenceMetrics\"]:\n            fpr.append(item.get(\"falsePositiveRate\", 0.0))\n            tpr.append(item.get(\"recall\", 0.0))\n            thresholds.append(item.get(\"confidenceThreshold\", 0.0))\n        print(f\"fpr: {fpr}\")\n        print(f\"tpr: {tpr}\")\n        print(f\"thresholds: {thresholds}\")\n        classificationMetrics.log_roc_curve(fpr, tpr, thresholds)\n\n        # log the confusion matrix\n        annotations = []\n        for item in test_confusion_matrix[\"annotationSpecs\"]:\n            annotations.append(item[\"displayName\"])\n        logging.info(\"confusion matrix annotations: %s\", annotations)\n        classificationMetrics.log_confusion_matrix(\n            annotations,\n            test_confusion_matrix[\"rows\"],\n        )\n\n        # log textual metrics info as well\n        for metric in metrics_list[0].keys():\n            if metric != \"confidenceMetrics\":\n                val_string = json.dumps(metrics_list[0][metric])\n                metrics.log_metric(metric, val_string)\n        # metrics.metadata[\"model_type\"] = \"AutoML Tabular classification\"\n\n    logging.getLogger().setLevel(logging.INFO)\n    aip.init(project=project)\n    # extract the model resource name from the input Model Artifact\n    model_resource_path = model.metadata[\"resourceName\"]\n    logging.info(\"model path: %s\", model_resource_path)\n\n    client_options = {\"api_endpoint\": f\"{region}-aiplatform.googleapis.com\"}\n    # Initialize client that will be used to create and send requests.\n    client = aip.gapic.ModelServiceClient(client_options=client_options)\n    metrics_list = get_eval_info(client, model_resource_path)\n    log_metrics(metrics_list, classificationMetrics)\n\n"
            ],
            "image": "python:3.9"
          }
        },
        "exec-return-unmanaged-model": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "return_unmanaged_model"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.12' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef return_unmanaged_model(\n    artifact_uri: str, resource_name: str, model: Output[Artifact]\n):\n    model.metadata[\"resourceName\"] = resource_name\n    model.uri = artifact_uri\n\n"
            ],
            "image": "python:3.9"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "tabular-classification-automl--evaluation-pipeline"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "interpret-automl-classification-metrics-classificationMetrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "classificationMetrics",
                  "producerSubtask": "interpret-automl-classification-metrics"
                }
              ]
            },
            "interpret-automl-classification-metrics-metrics": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "metrics",
                  "producerSubtask": "interpret-automl-classification-metrics"
                }
              ]
            }
          }
        },
        "tasks": {
          "interpret-automl-classification-metrics": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-interpret-automl-classification-metrics"
            },
            "dependentTasks": [
              "return-unmanaged-model"
            ],
            "inputs": {
              "artifacts": {
                "model": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "model",
                    "producerTask": "return-unmanaged-model"
                  }
                }
              },
              "parameters": {
                "project": {
                  "componentInputParameter": "project"
                },
                "region": {
                  "componentInputParameter": "region"
                }
              }
            },
            "taskInfo": {
              "name": "interpret-automl-classification-metrics"
            }
          },
          "return-unmanaged-model": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-return-unmanaged-model"
            },
            "inputs": {
              "parameters": {
                "artifact_uri": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "https://us-central1-aiplatform.googleapis.com/v1/projects/125188993477/locations/us-central1/models/2223665510153715712"
                    }
                  }
                },
                "resource_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "projects/125188993477/locations/us-central1/models/2223665510153715712"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "return-unmanaged-model"
            }
          }
        }
      },
      "inputDefinitions": {
        "parameters": {
          "project": {
            "type": "STRING"
          },
          "region": {
            "type": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "interpret-automl-classification-metrics-classificationMetrics": {
            "artifactType": {
              "schemaTitle": "system.ClassificationMetrics",
              "schemaVersion": "0.0.1"
            }
          },
          "interpret-automl-classification-metrics-metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.12"
  },
  "runtimeConfig": {}
}